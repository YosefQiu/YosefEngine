// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Prefab.txt

#ifndef PROTOBUF_Prefab_2etxt__INCLUDED
#define PROTOBUF_Prefab_2etxt__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace XiaoHua {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Prefab_2etxt();
void protobuf_AssignDesc_Prefab_2etxt();
void protobuf_ShutdownFile_Prefab_2etxt();

class Prefab;

// ===================================================================

class Prefab : public ::google::protobuf::MessageLite {
 public:
  Prefab();
  virtual ~Prefab();
  
  Prefab(const Prefab& from);
  
  inline Prefab& operator=(const Prefab& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Prefab& default_instance();
  
  void Swap(Prefab* other);
  
  // implements Message ----------------------------------------------
  
  Prefab* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Prefab& from);
  void MergeFrom(const Prefab& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:XiaoHua.Prefab)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_layer();
  inline void clear_has_layer();
  
  ::std::string* name_;
  ::google::protobuf::int32 layer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Prefab_2etxt();
  friend void protobuf_AssignDesc_Prefab_2etxt();
  friend void protobuf_ShutdownFile_Prefab_2etxt();
  
  void InitAsDefaultInstance();
  static Prefab* default_instance_;
};
// ===================================================================


// ===================================================================

// Prefab

// optional string name = 1;
inline bool Prefab::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Prefab::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Prefab::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Prefab::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Prefab::name() const {
  return *name_;
}
inline void Prefab::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Prefab::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Prefab::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Prefab::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Prefab::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 layer = 2;
inline bool Prefab::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Prefab::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Prefab::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Prefab::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 Prefab::layer() const {
  return layer_;
}
inline void Prefab::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace XiaoHua

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Prefab_2etxt__INCLUDED
